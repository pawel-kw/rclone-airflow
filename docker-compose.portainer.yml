# Portainer Stack Configuration for Rclone-Airflow Backup System
# Deploy this as a stack in Portainer

version: '3.8'

x-rclone-conf:
  &rclone-conf
  image: rclone/rclone:1.56.2
  environment:
    &rclone-env
    RCLONERC_ENDPOINT: http://rclone:5572
    RCLONERC_USERNAME: ${RCLONE_USERNAME:-rclone}
    RCLONERC_PASSWORD: ${RCLONE_PASSWORD:-rclone}
    TZ: ${TIMEZONE:-UTC}
  volumes:
    - rclone_config:/config/rclone
    # Add your data volumes here - examples:
    # - /host/path/to/backup:/data/backup:ro
    # - /var/lib/docker/volumes:/data/docker-volumes:ro
    # - /home:/data/home:ro

x-airflow-common:
  &airflow-common
  image: ${AIRFLOW_IMAGE:-apache/airflow:2.5.1}
  environment:
    &airflow-common-env
    AIRFLOW__CORE__EXECUTOR: CeleryExecutor
    AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
    AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://airflow:airflow@postgres/airflow
    AIRFLOW__CELERY__BROKER_URL: redis://:@redis:6379/0
    AIRFLOW__CORE__FERNET_KEY: ${AIRFLOW_FERNET_KEY:-}
    AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: ${AIRFLOW_DAGS_PAUSED:-true}
    AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
    AIRFLOW__API__AUTH_BACKEND: 'airflow.api.auth.backend.basic_auth'
    AIRFLOW__WEBSERVER__EXPOSE_CONFIG: 'true'
    AIRFLOW__SCHEDULER__DAG_DIR_LIST_INTERVAL: 60
    _PIP_ADDITIONAL_REQUIREMENTS: rclonerc pyyaml
    <<: *rclone-env
    BACKUP_JOBS_CONF: /opt/jobs.yml
  volumes:
    - airflow_dags:/opt/airflow/dags
    - airflow_logs:/opt/airflow/logs
    - airflow_plugins:/opt/airflow/plugins
    - backup_jobs_config:/opt/backup_config
    - rclone_config:/config/rclone:ro
  user: "${AIRFLOW_UID:-50000}:0"
  depends_on:
    &airflow-common-depends-on
    redis:
      condition: service_healthy
    postgres:
      condition: service_healthy

services:
  postgres:
    image: postgres:13
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "airflow"]
      interval: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - airflow

  redis:
    image: redis:7-alpine
    expose:
      - 6379
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 30s
      retries: 50
    restart: unless-stopped
    networks:
      - airflow

  airflow-webserver:
    <<: *airflow-common
    command: webserver
    ports:
      - "${AIRFLOW_WEBSERVER_PORT:-8080}:8080"
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: unless-stopped
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully
    networks:
      - airflow

  airflow-scheduler:
    <<: *airflow-common
    command: scheduler
    healthcheck:
      test: ["CMD-SHELL", 'airflow jobs check --job-type SchedulerJob --hostname "$${HOSTNAME}"']
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully
    networks:
      - airflow

  airflow-worker:
    <<: *airflow-common
    command: celery worker
    healthcheck:
      test:
        - "CMD-SHELL"
        - 'celery --app airflow.executors.celery_executor.app inspect ping -d "celery@$${HOSTNAME}"'
      interval: 30s
      timeout: 10s
      retries: 5
    environment:
      <<: *airflow-common-env
      DUMB_INIT_SETSID: "0"
    restart: unless-stopped
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully
    networks:
      - airflow

  airflow-triggerer:
    <<: *airflow-common
    command: triggerer
    healthcheck:
      test: ["CMD-SHELL", 'airflow jobs check --job-type TriggererJob --hostname "$${HOSTNAME}"']
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully
    networks:
      - airflow

  airflow-init:
    <<: *airflow-common
    entrypoint: /bin/bash
    command:
      - -c
      - |
        function ver() {
          printf "%04d%04d%04d%04d" $${1//./ }
        }
        airflow_version=$$(AIRFLOW__LOGGING__LOGGING_LEVEL=INFO && gosu airflow airflow version)
        airflow_version_comparable=$$(ver $${airflow_version})
        min_airflow_version=2.2.0
        min_airflow_version_comparable=$$(ver $${min_airflow_version})
        if (( airflow_version_comparable < min_airflow_version_comparable )); then
          echo
          echo -e "\033[1;31mERROR!!!: Too old Airflow version $${airflow_version}!\e[0m"
          echo "The minimum Airflow version supported: $${min_airflow_version}. Only use this or higher!"
          echo
          exit 1
        fi
        if [[ -z "${AIRFLOW_UID}" ]]; then
          echo
          echo -e "\033[1;33mWARNING!!!: AIRFLOW_UID not set!\e[0m"
          echo "Using default UID 50000"
          echo
        fi

        # Install additional packages
        pip install --no-cache-dir rclonerc pyyaml

        # Copy DAGs
        cp -r /opt/backup_config/dags/* /opt/airflow/dags/ 2>/dev/null || echo "No custom DAGs found"

        # Set up directories
        mkdir -p /sources/logs /sources/dags /sources/plugins
        chown -R "${AIRFLOW_UID:-50000}:0" /sources/{logs,dags,plugins}
        exec /entrypoint airflow version
    environment:
      <<: *airflow-common-env
      _AIRFLOW_DB_UPGRADE: 'true'
      _AIRFLOW_WWW_USER_CREATE: 'true'
      _AIRFLOW_WWW_USER_USERNAME: ${AIRFLOW_WWW_USER_USERNAME:-admin}
      _AIRFLOW_WWW_USER_PASSWORD: ${AIRFLOW_WWW_USER_PASSWORD:-admin}
    user: "0:0"
    volumes:
      - airflow_dags:/sources/dags
      - airflow_logs:/sources/logs
      - airflow_plugins:/sources/plugins
      - backup_jobs_config:/opt/backup_config
    networks:
      - airflow

  airflow-cli:
    <<: *airflow-common
    profiles:
      - debug
    environment:
      <<: *airflow-common-env
      CONNECTION_CHECK_MAX_COUNT: "0"
    command:
      - bash
      - -c
      - airflow
    networks:
      - airflow

  flower:
    <<: *airflow-common
    command: celery flower
    profiles:
      - flower
    ports:
      - "${FLOWER_PORT:-5555}:5555"
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:5555/"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully
    networks:
      - airflow

  rclone:
    <<: *rclone-conf
    container_name: rclone-server
    healthcheck:
      test:
        - CMD
        - /bin/sh
        - -c
        - |
          wget --no-verbose --tries=1 --spider \
          "http://$${RCLONERC_USERNAME}:$${RCLONERC_PASSWORD}@localhost:5572/metrics"
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: unless-stopped
    ports:
      - "${RCLONE_WEB_PORT:-5572}:5572"
    entrypoint:
      - /bin/sh
      - -c
      - |
        rclone rcd --rc-addr 0.0.0.0:5572 \
          --rc-user $${RCLONERC_USERNAME} \
          --rc-pass $${RCLONERC_PASSWORD} \
          --rc-enable-metrics \
          --verbose
    networks:
      - airflow

networks:
  airflow:
    driver: bridge

volumes:
  postgres_data:
    driver: local
  airflow_dags:
    driver: local
  airflow_logs:
    driver: local
  airflow_plugins:
    driver: local
  rclone_config:
    driver: local
  backup_jobs_config:
    driver: local
